# Top-level selections
experiment_name: "Baseline"
use_split_strategy: 'random'  # Choose between 'random', 'quantity_skew', 'feature_based'
use_manipulation_technique: 'sharpening_blurring' # 'contrast', 'brightness','white_balance', 'gaussian_noise', 'sharpening_blurring'  # Choose from available techniques
use_preprocessing_technique: 'none'  # Choose from available techniques

# Data settings
#sehoaoi data
#  csv_file: '\final_data\sehoaoi_data\sehoaoi_labeled_original_high.csv'
#  img_dir: '\final_data\sehoaoi_data'
#siemens
#  csv_file: '\final_data\siemens_amberg_data\siemens_labeled_original_high.csv'
#  img_dir: '\final_data\siemens_amberg_data'
data:
  csv_file: 'E:\FAU\Thesis\Code\fl_client_splitting_shuvanon\final_data\sehoaoi_data\sehoaoi_labeled_original_high.csv'
  img_dir: 'E:\FAU\Thesis\Code\fl_client_splitting_shuvanon\final_data\sehoaoi_data'
  preprocessed_data_dir: 'E:\FAU\Thesis\Code\fl_client_splitting_shuvanon\fl_base_code\preprocessed_data'
  save_split: True  # If True, save split data to disk; if False, keep in RAM
  clean_data_before_run: True  # If True, clean the client and benchmark folders before running
  batch_size: 16
  train_split: 0.8
  label_column_index: 6  # Index of the label column

# Benchmark settings
benchmark:
  csv_file: 'E:\FAU\Thesis\Code\fl_client_splitting_shuvanon\fl_base_code\benchmark_data\images\labels.csv'
  img_dir: 'E:\FAU\Thesis\Code\fl_client_splitting_shuvanon\fl_base_code\benchmark_data\images'
  benchmark_percentage: 0.1
  save_benchmark: True # If True, save benchmark data to a file, else keep in memory

num_clients: 5

# Splitting strategies
splitting:
  strategies:
    random:
      num_clients: 5
    quantity_skew:
      alpha: 0.1
    feature_based:
      feature_column: 'errText'

# Manipulation techniques
manipulation:
  manipulation_mode: random # "fixed" or "random"
  contrast:
    alpha: 2 # Decrease α < 1, Increase α > 1
    alpha_min: 0
    alpha_max: 3
  brightness:
    intensity: 150 #intensity value <0 is darken, >1 brighten
    intensity_min: -150
    intensity_max: 150
  white_balance:
    color_temperature: 12000 # << is worm, >> is cool
    color_temperature_min: 1000
    color_temperature_max: 20000
  gaussian_noise:
    sigma: 20 # σ = 0: No noise, σ > 0:Increasing noise
    sigma_min: 0
    sigma_max: 50
  edge_filter:
    threshold: 50
    lower_threshold: 50  # Fixed threshold for edge detection
    upper_threshold: 100
  sharpening_blurring:
    lambda_value: 0.6  # λ>0: The image is sharpened, λ<0: The image is blurred
    lambda_min: -1
    lambda_max: 1

# Preprocessing techniques
preprocessing:
  techniques:
    fixed_flip: { }
    rotation:
      degrees: 90
# Model
model:
  type: "custom_cnn"  # Options: "custom_cnn" or "transformer" [make 64*64 or 224*224 in (server.py ->load_benchmark_data), (client/utils.py ->load_data,PreprocessedDataset)]
  parameters:
    custom_cnn:
      input_dim: [ 3, 64, 64 ]  # Input dimensions, Match the image size
      conv:
        - { out_channels: 32, kernel_size: 3, stride: 1, padding: 1 }
        - { out_channels: 64, kernel_size: 3, stride: 1, padding: 1 }
        - { out_channels: 128, kernel_size: 3, stride: 1, padding: 1 }
      cnn_activation: [ "relu", "relu", "relu" ]  # Activation function for each convolutional layer
      pooling:
        - { type: "max", kernel_size: 2, stride: 2 }
        - { type: "max", kernel_size: 2, stride: 2 }
        - { type: "max", kernel_size: 2, stride: 2 }
      layer_neurons: [ 256, 128, 64 ]  # Neurons in fully connected layers
      activations: [ "relu", "relu", "relu" ]  # Activation functions for fully connected layers
      dropout: [ 0.5, 0.5, 0.5 ]  # Dropout for fully connected layers

    transformer:
      pretrained_model: vit_b_16 # ["vit_b_16", "vit_l_16", "swin_b", "swin_l"]
      use_pre_trained_weights: true  # Use pre-trained weights for Vision Transformer
      output_dim: 2  # Number of output classes

training:
  epochs: 100
  learning_rate: 0.0001

# Server and Client specific configurations
network:
  server:
    address: "0.0.0.0:8080"  # Server listens on all interfaces
    num_rounds: 10
  client:
    address: "127.0.0.1:8080"  # Client connects to localhost